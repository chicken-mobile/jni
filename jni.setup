;; -*- scheme -*-

(use files srfi-1)

(define (require-envvar var)
  (let ((val (get-environment-variable var)))
    (or val
        (with-output-to-port (current-error-port)
          (lambda ()
            (printf "\n\n=== Please, set the ~a environment variable. ===\n\n" var)))
        (exit 1))))

(define java-path
  (require-envvar "JAVA_HOME"))

(define (choose-libjvm-path . jvm-paths)
  (let ((candidates
         (map (lambda (jvm-path)
                (make-pathname java-path jvm-path))
              jvm-paths)))
    (or (find file-exists? candidates)
        (error 'jni "could not find libjvm" candidates))))

(define libjvm-path
  (if (host-extension)
      (cond-expand
       (x86-64
        (choose-libjvm-path
         "/jre/lib/amd64/server/"
         "/jre/lib/x64/server/"
         "/jre/lib/amd64/client/"
         "/jre/lib/x64/client/"))
       (x86
        (choose-libjvm-path
         "/jre/lib/i386/server/"
         "/jre/lib/i386/client/")))
      (require-envvar "NDK_LIBDIR")))

(define-syntax compile/non-android
  (ir-macro-transformer
   (lambda (x i c)
     `(compile ,',(string-append "-L" libjvm-path)
               ,',@(if (host-extension) '(-ljvm) '())
               ,',(string-append "-I" (make-pathname java-path "/include/"))
               . ,(cdr x)))))

(cond-expand
 (android
  (compile -s jni-jvm.scm -J)
  (compile -s jni-jvm.import.scm)
  (compile -s jni-dvm.scm -J)
  (compile -s jni-dvm.import.scm))
 (else
  (compile/non-android -s jni-jvm.scm -J)
  (compile/non-android -s jni-jvm.import.scm)
  (compile/non-android -s jni-dvm.scm -J)
  (compile/non-android -s jni-dvm.import.scm)))

(install-extension 'jni
  '("jni-jvm.so" "jni-jvm.import.so" "jni-dvm.so" "jni-dvm.import.so")
  '((version "0.1")))
