;; -*- scheme -*-

(define (require-envvar var)
  (let ((val (get-environment-variable var)))
    (or val
        (with-output-to-port (current-error-port)
          (lambda ()
            (printf "\n\n=== Please, set the ~a environment variable. ===\n\n" var)))
        (exit 1))))

(let* ((java-path (require-envvar "JAVA_HOME"))
       (ndk-libdir (require-envvar "NDK_LIBDIR"))
       (java-include-path (string-append java-path "/include/"))
       (libjvm-path
        (if (host-extension)
            (cond-expand
             (x86-64
              (let* ((server-jvm-path (string-append java-path "/jre/lib/amd64/server/"))
                     (server-jvm-path (if (file-exists? server-jvm-path) server-jvm-path
                                          (string-append java-path "/jre/lib/x64/server/")))
                     (client-jvm-path (string-append java-path "/jre/lib/amd64/client/"))
                     (client-jvm-path (if (file-exists? client-jvm-path) client-jvm-path
                                          (string-append java-path "/jre/lib/x64/client/"))))
                (if (file-exists? server-jvm-path)
                    server-jvm-path
                    (if (file-exists? client-jvm-path)
                        client-jvm-path
                        (error 'jni "could not find libjvm :(")))))
             (x86
              (let* ((server-jvm-path (string-append java-path "/jre/lib/i386/client/"))
                     (client-jvm-path (string-append java-path "/jre/lib/i386/client/")))
                (if (file-exists? server-jvm-path)
                    server-jvm-path
                    (if (file-exists? client-jvm-path)
                        client-jvm-path
                        (error 'jni "could not find libjvm :("))))))
            ndk-libdir)))

  (cond-expand
   (android
    (compile -s jni-dvm.scm -J)
    (compile -s jni-dvm.import.scm)
    (compile -s jni-jvm.scm -J)
    (compile -s jni-jvm.import.scm))
   (else
    (compile ,(string-append "-L" libjvm-path) ,@(if (host-extension) '(-ljvm) '()) -s ,(string-append "-I" java-include-path) jni-dvm.scm -J)
    (compile ,(string-append "-L" libjvm-path) ,@(if (host-extension) '(-ljvm) '()) -s ,(string-append "-I" java-include-path) jni-dvm.import.scm)
    (compile ,(string-append "-L" libjvm-path) ,@(if (host-extension) '(-ljvm) '()) -s ,(string-append "-I" java-include-path) jni-jvm.scm -J)
    (compile ,(string-append "-L" libjvm-path) ,@(if (host-extension) '(-ljvm) '()) -s ,(string-append "-I" java-include-path) jni-jvm.import.scm))))

(install-extension 'jni
  '("jni-jvm.so" "jni-jvm.import.so" "jni-dvm.so" "jni-dvm.import.so")
  '((version "0.1")))
