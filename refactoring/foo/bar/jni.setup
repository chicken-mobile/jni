(use files srfi-1)

(define cross-compiling (feature? 'cross-chicken))

(define (require-envvar var)
  (let ((val (get-environment-variable var)))
    (or val
        (with-output-to-port (current-error-port)
          (lambda ()
            (printf "\n\n=== Please, set the ~a environment variable. ===\n\n" var)))
        (exit 1))))

(define java-path
  (require-envvar "JAVA_HOME"))

(define (choose-libjvm-path . jvm-paths)
  (let ((candidates
	 (map (lambda (jvm-path)
		(make-pathname java-path jvm-path))
	      jvm-paths)))
    (or (find file-exists? candidates)
	(error 'jni "could not find libjvm" candidates))))

(define libjvm-path
  (if (or (and (feature? 'cross-chicken) (host-extension))
	  (not (host-extension)))
      (cond-expand
       (x86-64
	(choose-libjvm-path
	 "/jre/lib/amd64/server/"
	 "/jre/lib/x64/server/"
	 "/jre/lib/amd64/client/"
	 "/jre/lib/x64/client/"))
       (x86
	(choose-libjvm-path
	 "/jre/lib/i386/server/"
	 "/jre/lib/i386/client/")))))

(define-syntax compile/for-host
  (ir-macro-transformer
   (lambda (x i c)
     `(compile ,',(string-append "-L" libjvm-path)
	       -ljvm
	       ,',(string-append "-Wl,-rpath=" libjvm-path)
	       ,',(string-append "-I" (make-pathname java-path "/include/"))
	       . ,(cdr x)))))



(compile/for-host -s "jni-lolevel.scm" -J)
(compile/for-host -s "jni-lolevel.import.scm")

(compile/for-host -s "jni-signatures.scm" -J)
(compile/for-host -s "jni-signatures.import.scm")

(compile/for-host -s "jni-callbacks.scm" -J)
(compile/for-host -s "jni-callbacks.import.scm")

(compile/for-host -s "jni-types.scm" -J)
(compile/for-host -s "jni-types.import.scm")

(compile/for-host -s "jni-jvalues.scm" -J)
(compile/for-host -s "jni-jvalues.import.scm")

(compile/for-host -s "jni-array.scm" -J)
(compile/for-host -s "jni-array.import.scm")

(compile/for-host -s "jni-field-id.scm" -J)
(compile/for-host -s "jni-field-id.import.scm")

(compile/for-host -s "jni-method-id.scm" -J)
(compile/for-host -s "jni-method-id.import.scm")

(compile/for-host -s "jni-jlambda-field.scm" -J)
(compile/for-host -s "jni-jlambda-field.import.scm")

(compile/for-host -s "jni-jlambda-method.scm" -J)
(compile/for-host -s "jni-jlambda-method.import.scm")

(compile/for-host -s "jni-jlambda-methods-selection.scm" -J)
(compile/for-host -s "jni-jlambda-methods-selection.import.scm")

(compile/for-host -s "jni-jlambda-methods.scm" -J)
(compile/for-host -s "jni-jlambda-methods.import.scm")

(compile/for-host -s "jni-reflection.scm" -J)
(compile/for-host -s "jni-reflection.import.scm")

(compile/for-host -s "jni-jimport.scm" -J)
(compile/for-host -s "jni-jimport.import.scm")

(compile/for-host -s "jni-jlambda.scm" -J)
(compile/for-host -s "jni-jlambda.import.scm")

(compile/for-host -s "jni.scm" -J)
(compile/for-host -s "jni.import.scm")

(install-extension 'jni
  '("jni-lolevel.so" "jni-lolevel.import.scm" 
    
    "jni-signatures.so" "jni-signatures.import.scm" "jni-signatures.import.so"   
    "jni-callbacks.so" "jni-callbacks.import.scm" "jni-callbacks.import.so"   
    "jni-types.so" "jni-types.import.scm" "jni-types.import.so"
    "jni-jvalues.so" "jni-jvalues.import.scm" "jni-jvalues.import.so"
    "jni-array.so" "jni-array.import.scm" "jni-array.import.so"

    "jni-field-id.so" "jni-field-id.import.scm" "jni-field-id.import.so"
    "jni-method-id.so" "jni-method-id.import.scm" "jni-method-id.import.so"    

    "jni-jlambda-field.so" "jni-jlambda-field.import.scm" "jni-jlambda-field.import.scm"
    "jni-jlambda-method.so" "jni-jlambda-method.import.scm" "jni-jlambda-method.import.scm"
    "jni-jlambda-methods-selection.so" "jni-jlambda-methods-selection.import.scm" "jni-jlambda-methods-selection.import.so"
    "jni-jlambda-methods.so" "jni-jlambda-methods.import.scm" "jni-jlambda-methods.import.so"
    
    "jni-reflection.scm" "jni-reflection.import.scm" "jni-reflection.import.so"
    "jni-jimport.so" "jni-jimport.import.scm" "jni-jimport.import.so"
    "jni-jlambda.so" "jni-jlambda.import.scm" "jni-jlambda.import.so"

    "jni.so" "jni.import.scm" "jni.import.so" ) 
  '((version "0.3")))


