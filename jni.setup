;; -*- scheme -*-

(use files)

(define (require-envvar var)
  (let ((val (get-environment-variable var)))
    (or val
        (with-output-to-port (current-error-port)
          (lambda ()
            (printf "\n\n=== Please, set the ~a environment variable. ===\n\n" var)))
        (exit 1))))


(define java-path
  (require-envvar "JAVA_HOME"))

(define libjvm-path
  (if (host-extension)
      (cond-expand
       (x86-64
        (let* ((server-jvm-path (make-pathname java-path "/jre/lib/amd64/server/"))
               (server-jvm-path (if (file-exists? server-jvm-path)
                                    server-jvm-path
                                    (make-pathname java-path "/jre/lib/x64/server/")))
               (client-jvm-path (make-pathname java-path "/jre/lib/amd64/client/"))
               (client-jvm-path (if (file-exists? client-jvm-path)
                                    client-jvm-path
                                    (make-pathname java-path "/jre/lib/x64/client/"))))
          (if (file-exists? server-jvm-path)
              server-jvm-path
              (if (file-exists? client-jvm-path)
                  client-jvm-path
                  (error 'jni "could not find libjvm :(")))))
       (x86
        (let* ((server-jvm-path (make-pathname java-path "/jre/lib/i386/client/"))
               (client-jvm-path (make-pathname java-path "/jre/lib/i386/client/")))
          (if (file-exists? server-jvm-path)
              server-jvm-path
              (if (file-exists? client-jvm-path)
                  client-jvm-path
                  (error 'jni "could not find libjvm :("))))))
      (require-envvar "NDK_LIBDIR")))

(define-syntax compile/jvm
  (ir-macro-transformer
   (lambda (x i c)
     `(compile ,',(string-append "-L" libjvm-path)
               ,',@(if (host-extension) '(-ljvm) '())
               ,',(string-append "-I" (make-pathname java-path "/include/"))
               . ,(cdr x)))))

(cond-expand
 (android
  (compile -s jni.scm -J)
  (compile -s jni.import.scm))
 (else
  (compile/jvm -s jni.scm -J)
  (compile/jvm -s jni.import.scm)))

(install-extension 'jni
  '("jni.so" "jni.import.so")
  '((version "0.1")))
