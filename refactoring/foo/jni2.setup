(use files srfi-1)

(define cross-compiling (feature? 'cross-chicken))

(define (require-envvar var)
  (let ((val (get-environment-variable var)))
    (or val
        (with-output-to-port (current-error-port)
          (lambda ()
            (printf "\n\n=== Please, set the ~a environment variable. ===\n\n" var)))
        (exit 1))))

(define java-path
  (require-envvar "JAVA_HOME"))

(define (choose-libjvm-path . jvm-paths)
  (let ((candidates
	 (map (lambda (jvm-path)
		(make-pathname java-path jvm-path))
	      jvm-paths)))
    (or (find file-exists? candidates)
	(error 'jni "could not find libjvm" candidates))))

(define libjvm-path
  (if (or (and (feature? 'cross-chicken) (host-extension))
	  (not (host-extension)))
      (cond-expand
       (x86-64
	(choose-libjvm-path
	 "/jre/lib/amd64/server/"
	 "/jre/lib/x64/server/"
	 "/jre/lib/amd64/client/"
	 "/jre/lib/x64/client/"))
       (x86
	(choose-libjvm-path
	 "/jre/lib/i386/server/"
	 "/jre/lib/i386/client/")))))

(define-syntax compile/for-host
  (ir-macro-transformer
   (lambda (x i c)
     `(compile ,',(string-append "-L" libjvm-path)
	       -ljvm
	       ,',(string-append "-Wl,-rpath=" libjvm-path)
	       ,',(string-append "-I" (make-pathname java-path "/include/"))
	       . ,(cdr x)))))

(if (or (not cross-compiling)
	(and cross-compiling 
	     (host-extension)))
    (begin
      (compile/for-host -s "jni2-lolevel.scm" -J)
      (compile/for-host -s "jni2-lolevel.import.scm")

      (compile/for-host -s "jni-signatures.scm" -J)
      (compile/for-host -s "jni-signatures.import.scm")

      (compile/for-host -s "jni-jvalues.scm" -J)
      (compile/for-host -s "jni-jvalues.import.scm")

      (compile/for-host -s "jni-types.scm" -J)
      (compile/for-host -s "jni-types.import.scm")

      (compile/for-host -s "jni-array.scm" -J)
      (compile/for-host -s "jni-array.import.scm")

      (compile/for-host -s "jni-field-id.scm" -J)
      (compile/for-host -s "jni-field-id.import.scm")

      (compile/for-host -s "jni-method-id.scm" -J)
      (compile/for-host -s "jni-method-id.import.scm")

      (compile/for-host -s "jni-jlambda-field.scm" -J)
      (compile/for-host -s "jni-jlambda-field.import.scm")

      (compile/for-host -s "jni-jlambda-method.scm" -J)
      (compile/for-host -s "jni-jlambda-method.import.scm")

      (compile/for-host -s "jni-jlambda-methods-selection.scm" -J)
      (compile/for-host -s "jni-jlambda-methods-selection.import.scm")

      (compile/for-host -s "jni-jlambda-methods.scm" -J)
      (compile/for-host -s "jni-jlambda-methods.import.scm")

      (compile/for-host -s "jni-reflection.scm" -J)
      (compile/for-host -s "jni-reflection.import.scm")
      
      (compile/for-host -s "jni-jlambda.scm" -J)
      (compile/for-host -s "jni-jlambda.import.scm")

      (compile/for-host -s "jni2.scm" -J)  
      (compile/for-host -s "jni2.import.scm"))
    (begin
      (compile -s -Dandroid "jni2-lolevel.scm" -J)
      (compile -s -Dandroid "jni2.scm" -J)
      (compile -s -Dandroid "jni2-lolevel.import.scm")
      (compile -s -Dandroid "jni2.import.scm")))

(install-extension 'jni2
  '("jni2-lolevel.so" "jni2-lolevel.import.so" 
    "jni2.so" "jni2.import.so"

    "jni-signatures.so" "jni-types.so" "jni-array.so" "jni-jvalues.so"
    "jni-field-id.so" "jni-jlambda-field.so"
    "jni-method-id.so" "jni-jlambda-method.so"
    "jni-jlambda-methods-selection.so" "jni-jlambda-methods.so" 
    "jni-reflection.so" "jni-jlambda.so"

    "jni-signatures.import.so" "jni-types.import.so" "jni-array.import.so" "jni-jvalues.import.so"
    "jni-field-id.import.so" "jni-jlambda-field.import.so"
    "jni-method-id.import.so" "jni-jlambda-method.import.so"
    "jni-jlambda-methods-selection.import.so" "jni-jlambda-methods.import.so" 
    "jni-reflection.import.so" "jni-jlambda.import.so")

  '((version "0.2")))
